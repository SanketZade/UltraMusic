// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using WebKit;
using System.Collections.Generic;
using CoreGraphics;
using System.Diagnostics;

namespace UltraMusic
{
    public enum MusicProvider
    {
        Saavn,
        AmazonPrime,
        GoogleMusic,
        None
    }

    public partial class MasterDetailController : NSSplitViewController
    {
        public MasterDetailController (IntPtr handle) : base (handle)
        {

        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            var children = ChildViewControllers;
            var left = SideBarItem.ViewController as SideBarController;
            var right = WebRendererItem.ViewController;

            if (right.View.Subviews.Length > 0) 
            {
                right.View.Subviews[0].RemoveFromSuperview();
            }
            var webView = GetView(MusicProvider.Saavn, right.View.Frame);
            right.View.AddSubview(webView);

            left.ProviderClicked += (provider) => 
            {
                if (right.View.Subviews.Length > 0)
                {
                    right.View.Subviews[0].RemoveFromSuperview();
                }
                webView = GetView(provider, right.View.Frame);
                right.View.AddSubview(webView);
            };
        }

        private Dictionary<MusicProvider, WKWebView> webViews;
        private WKWebView GetView(MusicProvider provider, CGRect rect) {
            if (webViews == null)
                webViews = new Dictionary<MusicProvider, WKWebView>();
            if (!webViews.ContainsKey(provider)) {
                var webView = new WKWebView(rect, new WKWebViewConfiguration())
                {
                    CustomUserAgent = "Mozilla/5.0 " +
                    "(Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 " +
                    "(KHTML, like Gecko) Version/12.0 Safari/605.1.15",
                    AutoresizingMask = NSViewResizingMask.HeightSizable | NSViewResizingMask.WidthSizable
                };

                string urlString;
                switch(provider) {
                    case MusicProvider.Saavn:
                        urlString = "https://saavn.com";
                        break;
                    case MusicProvider.AmazonPrime:
                        urlString = "https://music.amazon.com";
                        break;
                    case MusicProvider.GoogleMusic:
                        urlString = "https://music.google.com";
                        break;
                    default:
                        urlString = "https://google.com";
                        Debug.WriteLine($"Cannot handle site {provider}!");
                        break;
                }
                var req = new NSUrlRequest(new NSUrl(urlString));
                webView.LoadRequest(req);
                webViews[provider] = webView;
            }
            return webViews[provider];
        }
    }
}
